(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
// Heap On Top
var Heap = (function () {
    function Heap(heapArr) {
        this.heap = [];
        this.heap = [];
        for (var i = 0, len = heapArr.length; i < len; i++) {
            this.push(heapArr[i]);
        }
    }
    // public function
    // ---------------
    Heap.prototype.get = function (index) {
        if (index >= 0 && index < this.heap.length) {
            return this.heap[index];
        }
    };
    Heap.prototype.push = function (node) {
        this.heap.push(node);
        this.goUp(this.heap.length - 1);
        console.log("this.heap -- ", this.heap);
    };
    Heap.prototype.pop = function () {
        if (this.isEmpty())
            return;
        var result;
        this.swap(0, this.heap.length - 1);
        result = this.heap.pop();
        !this.isEmpty() && this.goDown(0);
        return result;
    };
    Heap.prototype.remove = function (index) {
        if (index < 0 || index >= this.heap.length)
            return;
    };
    Heap.prototype.top = function () {
        if (this.heap[0])
            return this.heap[0];
    };
    // 获取通过 key 指定的值
    Heap.prototype.getValue = function (index) {
        if (index < 0 || index >= this.heap.length)
            return;
        return this.heap[index];
    };
    Heap.prototype.isEmpty = function () {
        return !this.heap.length;
    };
    // private function
    // ---------------
    Heap.prototype.goUp = function (index) {
        var heap = this;
        var value = heap.getValue(index), parent = heap.getParentIndex(index);
        if (parent === undefined)
            return;
        if (heap.getValue(parent) > heap.getValue(index)) {
            this.swap(index, parent);
            this.goUp(parent);
        }
    };
    Heap.prototype.goDown = function (index) {
        var heap = this;
        var value = heap.getValue(index), _a = heap.getChildIndex(index), left = _a[0], right = _a[1];
        if (left && right) {
            var swapIndex = heap.getValue(left) < heap.getValue(right) ? left : right;
            if (heap.getValue(swapIndex) < value) {
                heap.swap(index, swapIndex);
                heap.goDown(swapIndex);
            }
        }
        else if (left !== null) {
            if (heap.getValue(left) < value) {
                heap.swap(index, left);
                heap.goDown(left);
            }
        }
        else {
            console.log("go down: no children!");
        }
    };
    Heap.prototype.getParentIndex = function (index) {
        if (index < 0 || index >= this.heap.length)
            return;
        if (index === 0)
            return 0;
        return Math.floor((index - 1) / 2);
    };
    Heap.prototype.getChildIndex = function (index) {
        var left = 2 * index + 1, right = 2 * index + 2, length = this.heap.length;
        if (right <= length - 1) {
            return [left, right];
        }
        else if (left === length - 1) {
            return [left, null];
        }
        else {
            return [null, null];
        }
    };
    Heap.prototype.swap = function (parentIndex, childIndex) {
        var tmp = this.heap[parentIndex];
        this.heap[parentIndex] = this.heap[childIndex];
        this.heap[childIndex] = tmp;
    };
    return Heap;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Heap;
},{}],2:[function(require,module,exports){
// import Game from "./game";
// let game = new Game( "container", 3 );
//
// console.log( game );
// console.log( "------------------------" );
"use strict";
var heap2_1 = require('./heap2');
console.log("------------------------");
var heap = new heap2_1.default([3, 5, 4, 1, 2, 19, 18, 22, 12, 7]);
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
console.log(heap.pop());
console.log(heap.heap);
},{"./heap2":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
