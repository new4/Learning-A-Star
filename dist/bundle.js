(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var node_1 = require('./node');
var heap_1 = require('./heap');
var Astar = (function () {
    function Astar(startNode, targetNode) {
        this.startNode = startNode;
        this.targetNode = targetNode;
        this.openList = new heap_1.default([startNode], "F");
        this.closedList = [];
        this.b_closedList = {};
    }
    // public function
    // ---------------
    Astar.prototype.run = function () {
        console.log("AStar Run !");
        var astar = this;
        var count = 0;
        var _loop_1 = function() {
            console.log("openlist - ", astar.openList);
            console.log("closedList - ", astar.closedList);
            var currentNode;
            do {
                if (astar.openList.isEmpty())
                    return { value: console.log(" empty! ") };
                currentNode = astar.openList.pop();
            } while (astar.b_closedList[currentNode.value.toString()] === 1);
            astar.closedList.push(currentNode);
            astar.b_closedList[currentNode.value.toString()] = 1;
            var nextNodes = currentNode.getNextNodes();
            count++;
            nextNodes.forEach(function (nextNode) {
                nextNode.F = currentNode.getCurrentCost() + currentNode.getCostToNext() + nextNode.getHeuristicToTarget(astar.targetNode);
                nextNode.currentCost = count;
                astar.openList.push(nextNode);
            });
        };
        while (!node_1.default.isSame(astar.openList.top(), astar.targetNode) && !astar.openList.isEmpty()) {
            var state_1 = _loop_1();
            if (typeof state_1 === "object") return state_1.value;
        }
        console.log(" astar - ", astar);
        var tailNode = astar.openList.top();
        var p = [];
        while (tailNode) {
            p.push(tailNode.value.toString());
            tailNode = tailNode.parent;
        }
        console.log(" p ----- ", p);
    };
    // private function
    // ---------------
    Astar.prototype.getHeuristicTo = function () {
    };
    Astar.prototype.isBelongToClosed = function (str) {
        return !!this.b_closedList[str];
    };
    return Astar;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Astar;
},{"./heap":3,"./node":5}],2:[function(require,module,exports){
"use strict";
var node_1 = require("./node");
var astar_1 = require('./astar');
var util_1 = require('./util');
var Game = (function () {
    function Game(gameContainerId, scale) {
        this.startNode = new node_1.default(scale);
        this.targetNode = new node_1.default(scale);
        this.scale = scale;
        this.gameContainerId = gameContainerId;
        this.imgContainerId = "image";
        this.actionContainerId = "action";
        this.initDOM();
    }
    // public function
    // ---------------
    Game.prototype.mix = function () {
        this.startNode.shuffle();
        this.setStatusWithNode(this.startNode);
    };
    Game.prototype.start = function () {
        if (node_1.default.isSame(this.startNode, this.targetNode)) {
            return console.log('win!!!');
        }
        else {
            var astar = new astar_1.default(this.startNode, this.targetNode);
            astar.run();
        }
    };
    Game.prototype.setStatusWithNode = function (node) {
        var imgItems = this.imgContainerEle.getElementsByClassName("item");
        for (var i = 0, len = imgItems.length; i < len; i++) {
            imgItems[i].className = "item item-" + node.value[i];
        }
    };
    Game.prototype.moveImg = function (index) {
        console.log("index - - ", index);
        // console.log( this.zeroIndex );
    };
    // private function
    // ---------------
    Game.prototype.initDOM = function () {
        var game = this;
        game.gameContainerEle = util_1.$id(game.gameContainerId);
        game.imgContainerEle = util_1.$createEle('div', game.imgContainerId);
        game.actionContainerEle = util_1.$createEle('div', game.actionContainerId);
        var _loop_1 = function(i) {
            var ele = util_1.$createEle('div', undefined, "item item-" + i);
            ele.addEventListener('click', function () { game.moveImg(i); });
            game.imgContainerEle.appendChild(ele);
        };
        for (var i = 1; i < Math.pow(game.scale, 2); i++) {
            _loop_1(i);
        }
        game.imgContainerEle.appendChild(util_1.$createEle('div', undefined, "item item-0"));
        ["MIX", "START"].forEach(function (item, index, array) {
            var ele = util_1.$createEle('button', undefined, "btn btn-" + item.toLowerCase());
            ele.innerHTML = item;
            switch (item) {
                case 'MIX':
                    ele.addEventListener('click', game.mix.bind(game));
                    break;
                case 'START':
                    ele.addEventListener('click', game.start.bind(game));
                    break;
            }
            game.actionContainerEle.appendChild(ele);
        });
        game.gameContainerEle.appendChild(game.imgContainerEle);
        game.gameContainerEle.appendChild(game.actionContainerEle);
    };
    return Game;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Game;
},{"./astar":1,"./node":5,"./util":6}],3:[function(require,module,exports){
"use strict";
// Heap On Top
var Heap = (function () {
    function Heap(nodeList, key) {
        this.heap = nodeList;
        this.key = key;
        this.update();
    }
    // public function
    // ---------------
    Heap.prototype.push = function (node) {
        this.heap.push(node);
        this.update();
    };
    Heap.prototype.pop = function () {
        if (this.isEmpty())
            return;
        var result = this.heap.shift();
        console.log("this.heap", this.heap);
        !this.isEmpty() && this.update();
        return result;
    };
    Heap.prototype.top = function () {
        return this.heap[0];
    };
    Heap.prototype.isEmpty = function () {
        return !this.heap.length;
    };
    Heap.prototype.has = function (node) {
        var queryStr = node.value.toString();
        return !!this.b_heap[queryStr];
    };
    // private function
    // ---------------
    Heap.prototype.update = function () {
        console.log("heap update!");
        for (var i = Math.floor(this.heap.length / 2); i > -1; i--) {
            this.sink(i);
        }
    };
    Heap.prototype.sink = function (index) {
        console.log(" ---------- sink " + index + " ----------");
        if (index >= Math.floor(this.heap.length / 2))
            return console.log(" sink stop!*********");
        var value = this.heap[index][this.key];
        var _a = this.getChildIndex(index), left = _a[0], right = _a[1];
        if (left && this.heap[left] && this.heap[left][this.key] < value)
            this.swap(index, left);
        if (right && this.heap[right] && this.heap[right][this.key] < value)
            this.swap(index, right);
    };
    Heap.prototype.getChildIndex = function (index) {
        var left, right;
        if (index >= Math.floor(this.heap.length / 2))
            return [null, null];
        left = 2 * index + 1;
        right = (left + 1) === this.heap.length ? (left + 1) : null;
        return [left, right];
    };
    Heap.prototype.swap = function (parent, child) {
        var tmp = this.heap[parent];
        this.heap[parent] = this.heap[child];
        this.heap[child] = tmp;
        this.sink(child);
    };
    // static function
    // ---------------
    Heap.getChildIndex = function (heap, index) {
        var left, right;
        if (index >= Math.floor(heap.length / 2))
            return;
        left = 2 * index + 1;
        right = (left + 1) === heap.length ? (left + 1) : null;
        return [left, right];
    };
    return Heap;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Heap;
},{}],4:[function(require,module,exports){
"use strict";
var game_1 = require("./game");
var game = new game_1.default("container", 3);
console.log(game);
console.log("------------------------");
},{"./game":2}],5:[function(require,module,exports){
"use strict";
var util_1 = require('./util');
var Node = (function () {
    function Node(scale) {
        this.scale = scale;
        this.value = this.createNodeValueByScale(scale);
        this.zeroIndex = Math.pow(scale, 2) - 1;
        // this.parent = new Node(this.scale);
        this.F = 0;
        this.currentCost = 0;
    }
    // public function
    // ---------------
    Node.prototype.shuffle = function () {
        for (var i = 0; i < 5; i++) {
            var direction = Math.floor(Math.random() * 4 + 1);
            this.moveTo(direction);
        }
    };
    Node.prototype.moveTo = function (direction) {
        if (!this.canMoveTo(direction))
            return;
        var targetIndex;
        switch (direction) {
            case util_1.DIRECTION.UP:
                targetIndex = this.zeroIndex - this.scale;
                break;
            case util_1.DIRECTION.RIGHT:
                targetIndex = this.zeroIndex + 1;
                break;
            case util_1.DIRECTION.DOWN:
                targetIndex = this.zeroIndex + this.scale;
                break;
            case util_1.DIRECTION.LEFT:
                targetIndex = this.zeroIndex - 1;
                break;
            default:
                targetIndex = this.zeroIndex;
        }
        this.value[this.zeroIndex] = this.value[targetIndex];
        this.value[targetIndex] = 0;
        this.zeroIndex = targetIndex;
    };
    Node.prototype.getNextNodes = function () {
        var node = this;
        var nextNodes = [];
        [util_1.DIRECTION.UP, util_1.DIRECTION.RIGHT, util_1.DIRECTION.DOWN, util_1.DIRECTION.LEFT].forEach(function (direction) {
            if (node.canMoveTo(direction)) {
                var newNode = Node.nodeClone(node);
                newNode.parent = node;
                newNode.moveTo(direction);
                nextNodes.push(newNode);
            }
        });
        return nextNodes;
    };
    Node.prototype.canMoveTo = function (direction) {
        var row = Math.floor(this.zeroIndex / this.scale);
        var col = this.zeroIndex % this.scale;
        switch (direction) {
            case util_1.DIRECTION.UP:
                return row !== 0;
            case util_1.DIRECTION.RIGHT:
                return col !== this.scale - 1;
            case util_1.DIRECTION.DOWN:
                return row !== this.scale - 1;
            case util_1.DIRECTION.LEFT:
                return col !== 0;
            default:
                return false;
        }
    };
    Node.prototype.getHeuristicToTarget = function (targetNode) {
        var result = 0;
        var diff = 0;
        var i = 0, len = this.value.length;
        for (; i < len; i++) {
            if (this.value[i] !== i + 1)
                diff++;
        }
        var manhatten = 0;
        for (i = 0; i < len; i++) {
            var v = this.value[i];
            if (v !== 0) {
                // now in
                var row = Math.floor(i / this.scale);
                var col = i % this.scale;
                // should in
                var _row = Math.floor(v / this.scale);
                var _col = v % this.scale;
                manhatten += Math.abs(row - _row) + Math.abs(col - _col);
            }
        }
        result = 5 * manhatten + 1 * diff;
        return result;
    };
    Node.prototype.getCurrentCost = function () {
        return this.currentCost;
    };
    Node.prototype.getCostToNext = function () {
        return 1;
    };
    // private function
    // ----------------
    Node.prototype.createNodeValueByScale = function (scale) {
        var val = [];
        for (var i = 1; i < Math.pow(scale, 2); i++) {
            val.push(i);
        }
        val.push(0);
        return val;
    };
    // static function
    // ---------------
    Node.isSame = function (currentNode, targetNode) {
        return currentNode.value.toString() === targetNode.value.toString();
    };
    Node.nodeClone = function (node) {
        var newNode = new Node(node.scale);
        newNode.value = node.value.slice(0);
        newNode.zeroIndex = node.zeroIndex;
        return newNode;
    };
    // cost from one node to another node
    Node.costFromN2N = function (fromNode, toNode) {
    };
    return Node;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Node;
},{"./util":6}],6:[function(require,module,exports){
"use strict";
(function (DIRECTION) {
    DIRECTION[DIRECTION["UP"] = 1] = "UP";
    DIRECTION[DIRECTION["RIGHT"] = 2] = "RIGHT";
    DIRECTION[DIRECTION["DOWN"] = 3] = "DOWN";
    DIRECTION[DIRECTION["LEFT"] = 4] = "LEFT";
})(exports.DIRECTION || (exports.DIRECTION = {}));
var DIRECTION = exports.DIRECTION;
function $id(eleId) {
    return document.getElementById(eleId);
}
exports.$id = $id;
function $createEle(tagName, id, className) {
    var ele = document.createElement(tagName);
    if (id)
        ele.id = id;
    if (className)
        ele.className = className;
    return ele;
}
exports.$createEle = $createEle;
},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvdHMvYXN0YXIudHMiLCJzcmMvdHMvZ2FtZS50cyIsInNyYy90cy9oZWFwLnRzIiwic3JjL3RzL21haW4udHMiLCJzcmMvdHMvbm9kZS50cyIsInNyYy90cy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBLHFCQUFpQixRQUFRLENBQUMsQ0FBQTtBQUMxQixxQkFBaUIsUUFBUSxDQUFDLENBQUE7QUFHMUI7SUFRRSxlQUFhLFNBQWUsRUFBRSxVQUFnQjtRQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUU3QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksY0FBSSxDQUFFLENBQUUsU0FBUyxDQUFFLEVBQUUsR0FBRyxDQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFFckIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsbUJBQUcsR0FBSDtRQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUUsYUFBYSxDQUFFLENBQUM7UUFDN0IsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkO1lBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBRSxDQUFDO1lBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUUsZUFBZSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUUsQ0FBQztZQUVqRCxJQUFJLFdBQWlCLENBQUM7WUFFdEIsR0FBRSxDQUFDO2dCQUNELEVBQUUsQ0FBQSxDQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFHLENBQUM7b0JBQUMsZ0JBQU8sT0FBTyxDQUFD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QUM5QixnQkFBVyxHQUFsQixVQUFvQixRQUFjLEVBQUUsTUFBWTtJQUVoRCxDQUFDO0lBQ0gsV0FBQztBQUFELENBNUlBLEFBNElDLElBQUE7QUE1SUQ7c0JBNElDLENBQUE7OztBQzlJRCxXQUFZLFNBQVM7SUFBSSxxQ0FBTSxDQUFBO0lBQUUsMkNBQUssQ0FBQTtJQUFFLHlDQUFJLENBQUE7SUFBRSx5Q0FBSSxDQUFBO0FBQUMsQ0FBQyxFQUF4QyxpQkFBUyxLQUFULGlCQUFTLFFBQStCO0FBQXBELElBQVksU0FBUyxHQUFULGlCQUF3QyxDQUFBO0FBTXBELGFBQW9CLEtBQWE7SUFDL0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUUsS0FBSyxDQUFFLENBQUM7QUFDMUMsQ0FBQztBQUZlLFdBQUcsTUFFbEIsQ0FBQTtBQUVELG9CQUE0QixPQUFlLEVBQUUsRUFBVyxFQUFFLFNBQWtCO0lBQzFFLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUUsT0FBTyxDQUFFLENBQUM7SUFDNUMsRUFBRSxDQUFBLENBQUUsRUFBRyxDQUFDO1FBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDckIsRUFBRSxDQUFBLENBQUUsU0FBVSxDQUFDO1FBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDMUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFMZSxrQkFBVSxhQUt6QixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XHJcbmltcG9ydCBIZWFwIGZyb20gJy4vaGVhcCc7XHJcbmltcG9ydCB7IGJlbG9uZ1RvIH0gZnJvbSAnLi91dGlsJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzdGFye1xyXG4gIG9wZW5MaXN0OiBIZWFwXHJcbiAgY2xvc2VkTGlzdDogTm9kZVtdXHJcbiAgc3RhcnROb2RlOiBOb2RlXHJcbiAgdGFyZ2V0Tm9kZTogTm9kZVxyXG5cclxuICBwcml2YXRlIGJfY2xvc2VkTGlzdDogYmVsb25nVG9cclxuXHJcbiAgY29uc3RydWN0b3IoIHN0YXJ0Tm9kZTogTm9kZSwgdGFyZ2V0Tm9kZTogTm9kZSApe1xyXG4gICAgdGhpcy5zdGFydE5vZGUgPSBzdGFydE5vZGU7XHJcbiAgICB0aGlzLnRhcmdldE5vZGUgPSB0YXJnZXROb2RlO1xyXG5cclxuICAgIHRoaXMub3Blbkxpc3QgPSBuZXcgSGVhcCggWyBzdGFydE5vZGUgXSwgXCJGXCIgKTtcclxuICAgIHRoaXMuY2xvc2VkTGlzdCA9IFtdO1xyXG5cclxuICAgIHRoaXMuYl9jbG9zZWRMaXN0ID0ge307XHJcbiAgfVxyXG5cclxuICAvLyBwdWJsaWMgZnVuY3Rpb25cclxuICAvLyAtLS0tLS0tLS0tLS0tLS1cclxuICBydW4oKXtcclxuICAgIGNvbnNvbGUubG9nKCBcIkFTdGFyIFJ1biAhXCIgKTtcclxuICAgIGxldCBhc3RhciA9IHRoaXM7XHJcbiAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgd2hpbGUgKCAhTm9kZS5pc1NhbWUoIGFzdGFyLm9wZW5MaXN0LnRvcCgpLCBhc3Rhci50YXJnZXROb2RlICkgJiYgIWFzdGFyLm9wZW5MaXN0LmlzRW1wdHkoKSApe1xyXG4gICAgICBjb25zb2xlLmxvZyggXCJvcGVubGlzdCAtIFwiLCBhc3Rhci5vcGVuTGlzdCApO1xyXG4gICAgICBjb25zb2xlLmxvZyggXCJjbG9zZWRMaXN0IC0gXCIsIGFzdGFyLmNsb3NlZExpc3QgKTtcclxuXHJcbiAgICAgIGxldCBjdXJyZW50Tm9kZTogTm9kZTtcclxuXHJcbiAgICAgIGRve1xyXG4gICAgICAgIGlmKCBhc3Rhci5vcGVuTGlzdC5pc0VtcHR5KCkgKSByZXR1cm4gY29uc29sZS5sb2coIFwiIGVtcHR5ISBcIiApO1xyXG4gICAgICAgIGN1cnJlbnROb2RlID0gYXN0YXIub3Blbkxpc3QucG9wKCk7XHJcbiAgICAgIH0gd2hpbGUgKCBhc3Rhci5iX2Nsb3NlZExpc3RbIGN1cnJlbnROb2RlLnZhbHVlLnRvU3RyaW5nKCkgXSA9PT0gMSApO1xyXG5cclxuICAgICAgYXN0YXIuY2xvc2VkTGlzdC5wdXNoKCBjdXJyZW50Tm9kZSApO1xyXG4gICAgICBhc3Rhci5iX2Nsb3NlZExpc3RbIGN1cnJlbnROb2RlLnZhbHVlLnRvU3RyaW5nKCkgXSA9IDE7XHJcblxyXG4gICAgICBsZXQgbmV4dE5vZGVzID0gY3VycmVudE5vZGUuZ2V0TmV4dE5vZGVzKCk7XHJcblxyXG4gICAgICBjb3VudCArKztcclxuXHJcbiAgICAgIG5leHROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5leHROb2RlKXtcclxuICAgICAgICBuZXh0Tm9kZS5GID0gY3VycmVudE5vZGUuZ2V0Q3VycmVudENvc3QoKSArIGN1cnJlbnROb2RlLmdldENvc3RUb05leHQoKSArIG5leHROb2RlLmdldEhldXJpc3RpY1RvVGFyZ2V0KGFzdGFyLnRhcmdldE5vZGUpO1xyXG4gICAgICAgIG5leHROb2RlLmN1cnJlbnRDb3N0ID0gY291bnQ7XHJcbiAgICAgICAgYXN0YXIub3Blbkxpc3QucHVzaCggbmV4dE5vZGUgKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCBcIiBhc3RhciAtIFwiLCBhc3RhciApO1xyXG5cclxuICAgIGxldCB0YWlsTm9kZSA9IGFzdGFyLm9wZW5MaXN0LnRvcCgpO1xyXG4gICAgbGV0IHAgPSBbXTtcclxuICAgIHdoaWxlKCB0YWlsTm9kZSApe1xyXG4gICAgICBwLnB1c2goIHRhaWxOb2RlLnZhbHVlLnRvU3RyaW5nKCkgKTtcclxuICAgICAgdGFpbE5vZGUgPSB0YWlsTm9kZS5wYXJlbnQ7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyggXCIgcCAtLS0tLSBcIiwgcCApO1xyXG5cclxuICB9XHJcblxyXG5cclxuICAvLyBwcml2YXRlIGZ1bmN0aW9uXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXHJcbiAgcHJpdmF0ZSBnZXRIZXVyaXN0aWNUbygpe1xyXG5cclxuICB9XHJcbiAgcHJpdmF0ZSBpc0JlbG9uZ1RvQ2xvc2VkKCBzdHI6IHN0cmluZyApe1xyXG4gICAgcmV0dXJuICEhdGhpcy5iX2Nsb3NlZExpc3Rbc3RyXTtcclxuICB9XHJcblxyXG59XHJcbiIsImltcG9ydCBOb2RlIGZyb20gXCIuL25vZGVcIlxyXG5pbXBvcnQgQXN0YXIgZnJvbSAnLi9hc3RhcidcclxuaW1wb3J0IHsgJGlkLCAkY3JlYXRlRWxlIH0gZnJvbSAnLi91dGlsJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZXtcclxuICBzdGFydE5vZGU6IE5vZGVcclxuICB0YXJnZXROb2RlOiBOb2RlXHJcbiAgc2NhbGU6IG51bWJlclxyXG4gIHByaXZhdGUgZ2FtZUNvbnRhaW5lcklkOiBzdHJpbmdcclxuICBwcml2YXRlIGltZ0NvbnRhaW5lcklkOiBzdHJpbmdcclxuICBwcml2YXRlIGFjdGlvbkNvbnRhaW5lcklkOiBzdHJpbmdcclxuICBwcml2YXRlIGdhbWVDb250YWluZXJFbGVcclxuICBwcml2YXRlIGltZ0NvbnRhaW5lckVsZVxyXG4gIHByaXZhdGUgYWN0aW9uQ29udGFpbmVyRWxlXHJcblxyXG4gIGNvbnN0cnVjdG9yKCBnYW1lQ29udGFpbmVySWQ6IHN0cmluZywgc2NhbGU6IG51bWJlciApe1xyXG4gICAgdGhpcy5zdGFydE5vZGUgPSBuZXcgTm9kZSggc2NhbGUgKTtcclxuICAgIHRoaXMudGFyZ2V0Tm9kZSA9IG5ldyBOb2RlKCBzY2FsZSApO1xyXG4gICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xyXG5cclxuICAgIHRoaXMuZ2FtZUNvbnRhaW5lcklkID0gZ2FtZUNvbnRhaW5lcklkO1xyXG4gICAgdGhpcy5pbWdDb250YWluZXJJZCA9IFwiaW1hZ2VcIjtcclxuICAgIHRoaXMuYWN0aW9uQ29udGFpbmVySWQgPSBcImFjdGlvblwiO1xyXG5cclxuICAgIHRoaXMuaW5pdERPTSgpO1xyXG5cclxuICB9XHJcblxyXG4gIC8vIHB1YmxpYyBmdW5jdGlvblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxyXG4gIG1peCgpe1xyXG4gICAgdGhpcy5zdGFydE5vZGUuc2h1ZmZsZSgpO1xyXG4gICAgdGhpcy5zZXRTdGF0dXNXaXRoTm9kZSggdGhpcy5zdGFydE5vZGUgKTtcclxuICB9XHJcbiAgc3RhcnQoKXtcclxuICAgIGlmICggTm9kZS5pc1NhbWUoIHRoaXMuc3RhcnROb2RlLCB0aGlzLnRhcmdldE5vZGUgKSApe1xyXG4gICAgICByZXR1cm4gY29uc29sZS5sb2coICd3aW4hISEnICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQgYXN0YXIgPSBuZXcgQXN0YXIoIHRoaXMuc3RhcnROb2RlLCB0aGlzLnRhcmdldE5vZGUgKTtcclxuICAgICAgYXN0YXIucnVuKCk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICBzZXRTdGF0dXNXaXRoTm9kZSggbm9kZTogTm9kZSApe1xyXG4gICAgbGV0IGltZ0l0ZW1zID0gdGhpcy5pbWdDb250YWluZXJFbGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIml0ZW1cIik7XHJcbiAgICBmb3IgKCBsZXQgaSA9IDAsIGxlbiA9IGltZ0l0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSArKyApe1xyXG4gICAgICBpbWdJdGVtc1tpXS5jbGFzc05hbWUgPSBgaXRlbSBpdGVtLSR7bm9kZS52YWx1ZVtpXX1gO1xyXG4gICAgfVxyXG4gIH1cclxuICBtb3ZlSW1nKCBpbmRleCApe1xyXG4gICAgY29uc29sZS5sb2coIFwiaW5kZXggLSAtIFwiLCBpbmRleCApO1xyXG4gICAgLy8gY29uc29sZS5sb2coIHRoaXMuemVyb0luZGV4ICk7XHJcbiAgfVxyXG4gIC8vIHByaXZhdGUgZnVuY3Rpb25cclxuICAvLyAtLS0tLS0tLS0tLS0tLS1cclxuICBwcml2YXRlIGluaXRET00oKXtcclxuICAgIGxldCBnYW1lID0gdGhpcztcclxuICAgIGdhbWUuZ2FtZUNvbnRhaW5lckVsZSA9ICRpZCggZ2FtZS5nYW1lQ29udGFpbmVySWQgKTtcclxuICAgIGdhbWUuaW1nQ29udGFpbmVyRWxlID0gJGNyZWF0ZUVsZSggJ2RpdicsIGdhbWUuaW1nQ29udGFpbmVySWQgKTtcclxuICAgIGdhbWUuYWN0aW9uQ29udGFpbmVyRWxlID0gJGNyZWF0ZUVsZSggJ2RpdicsIGdhbWUuYWN0aW9uQ29udGFpbmVySWQgKTtcclxuXHJcbiAgICBmb3IgKCBsZXQgaSA9IDE7IGkgPCBNYXRoLnBvdyggZ2FtZS5zY2FsZSwgMik7IGkgKysgKXtcclxuICAgICAgbGV0IGVsZSA9ICRjcmVhdGVFbGUoICdkaXYnLCB1bmRlZmluZWQsIGBpdGVtIGl0ZW0tJHtpfWAgKTtcclxuICAgICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIGZ1bmN0aW9uKCl7IGdhbWUubW92ZUltZyhpKSB9ICk7XHJcbiAgICAgIGdhbWUuaW1nQ29udGFpbmVyRWxlLmFwcGVuZENoaWxkKCBlbGUgKTtcclxuICAgIH1cclxuICAgIGdhbWUuaW1nQ29udGFpbmVyRWxlLmFwcGVuZENoaWxkKCAkY3JlYXRlRWxlKCAnZGl2JywgdW5kZWZpbmVkLCBcIml0ZW0gaXRlbS0wXCIgKSApO1xyXG5cclxuICAgIFtcIk1JWFwiLCBcIlNUQVJUXCJdLmZvckVhY2goIGZ1bmN0aW9uKGl0ZW0sIGluZGV4LCBhcnJheSl7XHJcbiAgICAgIGxldCBlbGUgPSAkY3JlYXRlRWxlKCAnYnV0dG9uJywgdW5kZWZpbmVkLCBgYnRuIGJ0bi0ke2l0ZW0udG9Mb3dlckNhc2UoKX1gICk7XHJcbiAgICAgIGVsZS5pbm5lckhUTUwgPSBpdGVtO1xyXG4gICAgICBzd2l0Y2goIGl0ZW0gKXtcclxuICAgICAgICBjYXNlICdNSVgnOlxyXG4gICAgICAgICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIGdhbWUubWl4LmJpbmQoIGdhbWUgKSApO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnU1RBUlQnOlxyXG4gICAgICAgICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIGdhbWUuc3RhcnQuYmluZCggZ2FtZSApICk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBnYW1lLmFjdGlvbkNvbnRhaW5lckVsZS5hcHBlbmRDaGlsZCggZWxlICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBnYW1lLmdhbWVDb250YWluZXJFbGUuYXBwZW5kQ2hpbGQoIGdhbWUuaW1nQ29udGFpbmVyRWxlICk7XHJcbiAgICBnYW1lLmdhbWVDb250YWluZXJFbGUuYXBwZW5kQ2hpbGQoIGdhbWUuYWN0aW9uQ29udGFpbmVyRWxlICk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XHJcbmltcG9ydCB7IGJlbG9uZ1RvIH0gZnJvbSAnLi91dGlsJztcclxuLy8gSGVhcCBPbiBUb3BcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhcHtcclxuICBoZWFwOiBOb2RlW11cclxuICBiX2hlYXA6IGJlbG9uZ1RvXHJcbiAga2V5OiBzdHJpbmdcclxuICBjb25zdHJ1Y3Rvciggbm9kZUxpc3Q6IE5vZGVbXSwga2V5OiBzdHJpbmcgKXtcclxuICAgIHRoaXMuaGVhcCA9IG5vZGVMaXN0O1xyXG4gICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gcHVibGljIGZ1bmN0aW9uXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXHJcbiAgcHVzaCggbm9kZTogTm9kZSApe1xyXG4gICAgdGhpcy5oZWFwLnB1c2gobm9kZSk7XHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgcG9wKCl7XHJcbiAgICBpZiAoIHRoaXMuaXNFbXB0eSgpICkgcmV0dXJuO1xyXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuaGVhcC5zaGlmdCgpO1xyXG4gICAgY29uc29sZS5sb2coIFwidGhpcy5oZWFwXCIsIHRoaXMuaGVhcCApO1xyXG4gICAgIXRoaXMuaXNFbXB0eSgpICYmIHRoaXMudXBkYXRlKCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgdG9wKCl7XHJcbiAgICByZXR1cm4gdGhpcy5oZWFwWzBdO1xyXG4gIH1cclxuXHJcbiAgaXNFbXB0eSgpe1xyXG4gICAgcmV0dXJuICF0aGlzLmhlYXAubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgaGFzKG5vZGU6IE5vZGUpe1xyXG4gICAgbGV0IHF1ZXJ5U3RyID0gbm9kZS52YWx1ZS50b1N0cmluZygpO1xyXG4gICAgcmV0dXJuICEhdGhpcy5iX2hlYXBbcXVlcnlTdHJdO1xyXG4gIH1cclxuICAvLyBwcml2YXRlIGZ1bmN0aW9uXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXHJcbiAgcHJpdmF0ZSB1cGRhdGUoKXtcclxuICAgIGNvbnNvbGUubG9nKCBcImhlYXAgdXBkYXRlIVwiICk7XHJcbiAgICBmb3IgKCBsZXQgaSA9IE1hdGguZmxvb3IoIHRoaXMuaGVhcC5sZW5ndGgvMiApOyBpID4gLTE7IGkgLS0gKXtcclxuICAgICAgdGhpcy5zaW5rKGkpO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIHNpbmsoaW5kZXg6IG51bWJlcil7XHJcbiAgICBjb25zb2xlLmxvZyggYCAtLS0tLS0tLS0tIHNpbmsgJHtpbmRleH0gLS0tLS0tLS0tLWAgKTtcclxuXHJcbiAgICBpZiggaW5kZXggPj0gTWF0aC5mbG9vciggdGhpcy5oZWFwLmxlbmd0aC8yICkgKSByZXR1cm4gY29uc29sZS5sb2coIFwiIHNpbmsgc3RvcCEqKioqKioqKipcIiApIDtcclxuXHJcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmhlYXBbaW5kZXhdW3RoaXMua2V5XTtcclxuICAgIGxldCBbbGVmdCwgcmlnaHRdID0gdGhpcy5nZXRDaGlsZEluZGV4KGluZGV4KTtcclxuICAgIGlmICggbGVmdCAmJiB0aGlzLmhlYXBbbGVmdF0gJiYgdGhpcy5oZWFwW2xlZnRdW3RoaXMua2V5XSA8IHZhbHVlICkgdGhpcy5zd2FwKCBpbmRleCwgbGVmdCApO1xyXG4gICAgaWYgKCByaWdodCAmJiB0aGlzLmhlYXBbcmlnaHRdICYmIHRoaXMuaGVhcFtyaWdodF1bdGhpcy5rZXldIDwgdmFsdWUgKSB0aGlzLnN3YXAoIGluZGV4LCByaWdodCApO1xyXG4gIH1cclxuICBwcml2YXRlIGdldENoaWxkSW5kZXgoaW5kZXg6IG51bWJlcil7XHJcbiAgICBsZXQgbGVmdCwgcmlnaHQ7XHJcbiAgICBpZiAoIGluZGV4ID49IE1hdGguZmxvb3IoIHRoaXMuaGVhcC5sZW5ndGgvMiApICkgcmV0dXJuIFtudWxsLCBudWxsXTtcclxuICAgIGxlZnQgPSAyKmluZGV4ICsgMTtcclxuICAgIHJpZ2h0ID0gKGxlZnQgKyAxKSA9PT0gdGhpcy5oZWFwLmxlbmd0aCA/ICggbGVmdCArIDEgKSA6IG51bGw7XHJcbiAgICByZXR1cm4gWyBsZWZ0LCByaWdodCBdO1xyXG4gIH1cclxuICBwcml2YXRlIHN3YXAoIHBhcmVudDogbnVtYmVyLCBjaGlsZDogbnVtYmVyICl7XHJcbiAgICBsZXQgdG1wID0gdGhpcy5oZWFwW3BhcmVudF07XHJcbiAgICB0aGlzLmhlYXBbcGFyZW50XSA9IHRoaXMuaGVhcFtjaGlsZF07XHJcbiAgICB0aGlzLmhlYXBbY2hpbGRdID0gdG1wO1xyXG4gICAgdGhpcy5zaW5rKCBjaGlsZCApO1xyXG4gIH1cclxuICAvLyBzdGF0aWMgZnVuY3Rpb25cclxuICAvLyAtLS0tLS0tLS0tLS0tLS1cclxuICBzdGF0aWMgZ2V0Q2hpbGRJbmRleChoZWFwOiBOb2RlW10sIGluZGV4OiBudW1iZXIpe1xyXG4gICAgbGV0IGxlZnQsIHJpZ2h0O1xyXG4gICAgaWYgKCBpbmRleCA+PSBNYXRoLmZsb29yKCBoZWFwLmxlbmd0aC8yICkgKSByZXR1cm47XHJcbiAgICBsZWZ0ID0gMippbmRleCArIDE7XHJcbiAgICByaWdodCA9IChsZWZ0ICsgMSkgPT09IGhlYXAubGVuZ3RoID8gKCBsZWZ0ICsgMSApIDogbnVsbDtcclxuICAgIHJldHVybiBbIGxlZnQsIHJpZ2h0IF07XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBHYW1lIGZyb20gXCIuL2dhbWVcIjtcclxubGV0IGdhbWUgPSBuZXcgR2FtZSggXCJjb250YWluZXJcIiwgMyApO1xyXG5cclxuY29uc29sZS5sb2coIGdhbWUgKTtcclxuY29uc29sZS5sb2coIFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIgKTtcclxuIiwiaW1wb3J0IHsgRElSRUNUSU9OIH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9kZXtcbiAgdmFsdWU6IG51bWJlcltdXG4gIHplcm9JbmRleDogbnVtYmVyXG4gIHNjYWxlOiBudW1iZXJcbiAgcGFyZW50OiBOb2RlXG4gIEY6IG51bWJlclxuICBjdXJyZW50Q29zdDogbnVtYmVyXG4gIGNvbnN0cnVjdG9yKCBzY2FsZTogbnVtYmVyICkge1xuICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5jcmVhdGVOb2RlVmFsdWVCeVNjYWxlKCBzY2FsZSApO1xuICAgIHRoaXMuemVyb0luZGV4ID0gTWF0aC5wb3coc2NhbGUsIDIpIC0gMTtcblxuICAgIC8vIHRoaXMucGFyZW50ID0gbmV3IE5vZGUodGhpcy5zY2FsZSk7XG4gICAgdGhpcy5GID0gMDtcbiAgICB0aGlzLmN1cnJlbnRDb3N0ID0gMDtcbiAgfVxuXG4gIC8vIHB1YmxpYyBmdW5jdGlvblxuICAvLyAtLS0tLS0tLS0tLS0tLS1cbiAgc2h1ZmZsZSgpe1xuICAgIGZvciggbGV0IGkgPSAwOyBpIDwgNTsgaSArKyApe1xuICAgICAgbGV0IGRpcmVjdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQgKyAxKTtcbiAgICAgIHRoaXMubW92ZVRvKCBkaXJlY3Rpb24gKTtcbiAgICB9XG4gIH1cbiAgbW92ZVRvKCBkaXJlY3Rpb246IG51bWJlciApe1xuICAgIGlmICggIXRoaXMuY2FuTW92ZVRvKCBkaXJlY3Rpb24gKSApIHJldHVybjtcbiAgICBsZXQgdGFyZ2V0SW5kZXg7XG4gICAgc3dpdGNoKCBkaXJlY3Rpb24gKXtcbiAgICAgIGNhc2UgRElSRUNUSU9OLlVQOlxuICAgICAgICB0YXJnZXRJbmRleCA9IHRoaXMuemVyb0luZGV4IC0gdGhpcy5zY2FsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJUkVDVElPTi5SSUdIVDpcbiAgICAgICAgdGFyZ2V0SW5kZXggPSB0aGlzLnplcm9JbmRleCArIDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESVJFQ1RJT04uRE9XTjpcbiAgICAgICAgdGFyZ2V0SW5kZXggPSB0aGlzLnplcm9JbmRleCArIHRoaXMuc2NhbGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcbiAgICAgICAgdGFyZ2V0SW5kZXggPSB0aGlzLnplcm9JbmRleCAtIDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGFyZ2V0SW5kZXggPSB0aGlzLnplcm9JbmRleDtcbiAgICB9XG5cbiAgICB0aGlzLnZhbHVlWyB0aGlzLnplcm9JbmRleCBdID0gdGhpcy52YWx1ZVsgdGFyZ2V0SW5kZXggXTtcbiAgICB0aGlzLnZhbHVlWyB0YXJnZXRJbmRleCBdID0gMDtcbiAgICB0aGlzLnplcm9JbmRleCA9IHRhcmdldEluZGV4O1xuICB9XG4gIGdldE5leHROb2Rlcygpe1xuICAgIGxldCBub2RlID0gdGhpcztcbiAgICBsZXQgbmV4dE5vZGVzOiBOb2RlW10gPSBbXTtcbiAgICBbIERJUkVDVElPTi5VUCwgRElSRUNUSU9OLlJJR0hULCBESVJFQ1RJT04uRE9XTiwgRElSRUNUSU9OLkxFRlQgXS5mb3JFYWNoKCBmdW5jdGlvbihkaXJlY3Rpb24pe1xuICAgICAgaWYgKCBub2RlLmNhbk1vdmVUbyggZGlyZWN0aW9uICkgKXtcbiAgICAgICAgbGV0IG5ld05vZGUgPSBOb2RlLm5vZGVDbG9uZSggbm9kZSApO1xuICAgICAgICBuZXdOb2RlLnBhcmVudCA9IG5vZGU7XG4gICAgICAgIG5ld05vZGUubW92ZVRvKGRpcmVjdGlvbik7XG4gICAgICAgIG5leHROb2Rlcy5wdXNoKCBuZXdOb2RlICk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHROb2RlcztcbiAgfVxuICBjYW5Nb3ZlVG8oIGRpcmVjdGlvbjogbnVtYmVyICl7XG4gICAgbGV0IHJvdyA9IE1hdGguZmxvb3IoIHRoaXMuemVyb0luZGV4IC8gdGhpcy5zY2FsZSApO1xuICAgIGxldCBjb2wgPSB0aGlzLnplcm9JbmRleCAlIHRoaXMuc2NhbGU7XG5cbiAgICBzd2l0Y2goIGRpcmVjdGlvbiApe1xuICAgICAgY2FzZSBESVJFQ1RJT04uVVA6XG4gICAgICAgIHJldHVybiByb3cgIT09IDA7XG4gICAgICBjYXNlIERJUkVDVElPTi5SSUdIVDpcbiAgICAgICAgcmV0dXJuIGNvbCAhPT0gdGhpcy5zY2FsZSAtIDE7XG4gICAgICBjYXNlIERJUkVDVElPTi5ET1dOOlxuICAgICAgICByZXR1cm4gcm93ICE9PSB0aGlzLnNjYWxlIC0gMTtcbiAgICAgIGNhc2UgRElSRUNUSU9OLkxFRlQ6XG4gICAgICAgIHJldHVybiBjb2wgIT09IDA7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGdldEhldXJpc3RpY1RvVGFyZ2V0KHRhcmdldE5vZGU6IE5vZGUpOiBudW1iZXJ7XG4gICAgbGV0IHJlc3VsdDogbnVtYmVyID0gMDtcblxuICAgIGxldCBkaWZmOiBudW1iZXIgPSAwO1xuICAgIGxldCBpID0gMCxcbiAgICAgICAgbGVuID0gdGhpcy52YWx1ZS5sZW5ndGg7XG5cbiAgICBmb3IgKCA7IGkgPCBsZW47IGkgKysgKXtcbiAgICAgIGlmICggdGhpcy52YWx1ZVtpXSAhPT0gaSArIDEgKSBkaWZmICsrO1xuICAgIH1cblxuICAgIGxldCBtYW5oYXR0ZW46IG51bWJlciA9IDA7XG4gICAgZm9yICggaSA9IDA7IGkgPCBsZW47IGkgKysgKXtcbiAgICAgIGxldCB2ID0gdGhpcy52YWx1ZVtpXTtcbiAgICAgIGlmKCB2ICE9PSAwICl7XG4gICAgICAgIC8vIG5vdyBpblxuICAgICAgICBsZXQgcm93ID0gTWF0aC5mbG9vciggaS90aGlzLnNjYWxlICk7XG4gICAgICAgIGxldCBjb2wgPSBpJXRoaXMuc2NhbGU7XG4gICAgICAgIC8vIHNob3VsZCBpblxuICAgICAgICBsZXQgX3JvdyA9IE1hdGguZmxvb3IoIHYvdGhpcy5zY2FsZSApO1xuICAgICAgICBsZXQgX2NvbCA9IHYldGhpcy5zY2FsZTtcblxuICAgICAgICBtYW5oYXR0ZW4gKz0gTWF0aC5hYnMoIHJvdyAtIF9yb3cgKSArIE1hdGguYWJzKCBjb2wgLSBfY29sICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVzdWx0ID0gNSptYW5oYXR0ZW4gKyAxKmRpZmY7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGdldEN1cnJlbnRDb3N0KCk6IG51bWJlcntcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Q29zdDtcbiAgfVxuICBnZXRDb3N0VG9OZXh0KCk6IG51bWJlcntcbiAgICByZXR1cm4gMTtcbiAgfVxuICAvLyBwcml2YXRlIGZ1bmN0aW9uXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cbiAgcHJpdmF0ZSBjcmVhdGVOb2RlVmFsdWVCeVNjYWxlKCBzY2FsZTogbnVtYmVyICl7XG4gICAgbGV0IHZhbCA9IFtdO1xuICAgIGZvciAoIGxldCBpID0gMTsgaSA8IE1hdGgucG93KHNjYWxlLCAyKTsgaSArKyApe1xuICAgICAgdmFsLnB1c2goIGkgKTtcbiAgICB9XG4gICAgdmFsLnB1c2goIDAgKTtcbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIC8vIHN0YXRpYyBmdW5jdGlvblxuICAvLyAtLS0tLS0tLS0tLS0tLS1cbiAgc3RhdGljIGlzU2FtZSggY3VycmVudE5vZGU6IE5vZGUsIHRhcmdldE5vZGU6IE5vZGUgKXtcbiAgICByZXR1cm4gY3VycmVudE5vZGUudmFsdWUudG9TdHJpbmcoKSA9PT0gdGFyZ2V0Tm9kZS52YWx1ZS50b1N0cmluZygpO1xuICB9XG4gIHN0YXRpYyBub2RlQ2xvbmUoIG5vZGU6IE5vZGUgKXtcbiAgICBsZXQgbmV3Tm9kZSA9IG5ldyBOb2RlKCBub2RlLnNjYWxlICk7XG4gICAgbmV3Tm9kZS52YWx1ZSA9IG5vZGUudmFsdWUuc2xpY2UoMCk7XG4gICAgbmV3Tm9kZS56ZXJvSW5kZXggPSBub2RlLnplcm9JbmRleDtcbiAgICByZXR1cm4gbmV3Tm9kZTtcbiAgfVxuICAvLyBjb3N0IGZyb20gb25lIG5vZGUgdG8gYW5vdGhlciBub2RlXG4gIHN0YXRpYyBjb3N0RnJvbU4yTiggZnJvbU5vZGU6IE5vZGUsIHRvTm9kZTogTm9kZSApe1xuXG4gIH1cbn1cbiIsImV4cG9ydCBlbnVtIERJUkVDVElPTiAgeyBVUCA9IDEsIFJJR0hULCBET1dOLCBMRUZUIH1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgYmVsb25nVG97XHJcbiAgICBbcHJvcE5hbWU6IHN0cmluZ106IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uICRpZChlbGVJZDogc3RyaW5nKXtcclxuICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGVsZUlkICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiAkY3JlYXRlRWxlKCB0YWdOYW1lOiBzdHJpbmcsIGlkPzogc3RyaW5nLCBjbGFzc05hbWU/OiBzdHJpbmcgKXtcclxuICBsZXQgZWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggdGFnTmFtZSApO1xyXG4gIGlmKCBpZCApIGVsZS5pZCA9IGlkO1xyXG4gIGlmKCBjbGFzc05hbWUgKSBlbGUuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gIHJldHVybiBlbGU7XHJcbn1cclxuIl19
