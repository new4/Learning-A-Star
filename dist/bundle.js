(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var node_1 = require('./node');
var heap_1 = require('./heap');
var Astar = (function () {
    function Astar(startNode, targetNode) {
        this.startNode = startNode;
        this.targetNode = targetNode;
        this.openList = new heap_1.default([startNode], "F");
        this.closedList = [];
        this.b_closedList = {};
    }
    // public function
    // ---------------
    Astar.prototype.run = function () {
        console.log("AStar Run !");
        var astar = this;
        var count = 0;
        var _loop_1 = function() {
            var currentNode;
            do {
                if (astar.openList.isEmpty())
                    return { value: console.log(" empty! ") };
                currentNode = astar.openList.pop();
            } while (astar.b_closedList[currentNode.value.toString()] === 1);
            astar.closedList.push(currentNode);
            astar.b_closedList[currentNode.value.toString()] = 1;
            var nextNodes = currentNode.getNextNodes();
            count++;
            nextNodes.forEach(function (nextNode) {
                nextNode.F = currentNode.getCurrentCost() + currentNode.getCostToNext() + nextNode.getHeuristicToTarget(astar.targetNode);
                nextNode.currentCost = count;
                astar.openList.push(nextNode);
            });
        };
        while (!node_1.default.isSame(astar.openList.top(), astar.targetNode) && !astar.openList.isEmpty()) {
            var state_1 = _loop_1();
            if (typeof state_1 === "object") return state_1.value;
        }
        console.log(" astar - ", astar);
        var tailNode = astar.openList.top();
        var p = [];
        while (tailNode) {
            p.push(tailNode.value.toString());
            tailNode = tailNode.parent;
        }
        console.log(" p ----- ", p);
    };
    // private function
    // ---------------
    Astar.prototype.getHeuristicTo = function () {
    };
    Astar.prototype.isBelongToClosed = function (str) {
        return !!this.b_closedList[str];
    };
    return Astar;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Astar;
},{"./heap":3,"./node":5}],2:[function(require,module,exports){
"use strict";
var node_1 = require("./node");
var astar_1 = require('./astar');
var util_1 = require('./util');
var Game = (function () {
    function Game(gameContainerId, scale) {
        this.startNode = new node_1.default(scale);
        this.targetNode = new node_1.default(scale);
        this.scale = scale;
        this.gameContainerId = gameContainerId;
        this.imgContainerId = "image";
        this.actionContainerId = "action";
        this.initDOM();
    }
    // public function
    // ---------------
    Game.prototype.mix = function () {
        this.startNode.shuffle();
        this.setStatusWithNode(this.startNode);
    };
    Game.prototype.start = function () {
        if (node_1.default.isSame(this.startNode, this.targetNode)) {
            return console.log('win!!!');
        }
        else {
            var astar = new astar_1.default(this.startNode, this.targetNode);
            astar.run();
        }
    };
    Game.prototype.setStatusWithNode = function (node) {
        var imgItems = this.imgContainerEle.getElementsByClassName("item");
        for (var i = 0, len = imgItems.length; i < len; i++) {
            imgItems[i].className = "item item-" + node.value[i];
        }
    };
    Game.prototype.moveImg = function (index) {
        console.log("index - - ", index);
        // console.log( this.zeroIndex );
    };
    // private function
    // ---------------
    Game.prototype.initDOM = function () {
        var game = this;
        game.gameContainerEle = util_1.$id(game.gameContainerId);
        game.imgContainerEle = util_1.$createEle('div', game.imgContainerId);
        game.actionContainerEle = util_1.$createEle('div', game.actionContainerId);
        var _loop_1 = function(i) {
            var ele = util_1.$createEle('div', undefined, "item item-" + i);
            ele.addEventListener('click', function () { game.moveImg(i); });
            game.imgContainerEle.appendChild(ele);
        };
        for (var i = 1; i < Math.pow(game.scale, 2); i++) {
            _loop_1(i);
        }
        game.imgContainerEle.appendChild(util_1.$createEle('div', undefined, "item item-0"));
        ["MIX", "START"].forEach(function (item, index, array) {
            var ele = util_1.$createEle('button', undefined, "btn btn-" + item.toLowerCase());
            ele.innerHTML = item;
            switch (item) {
                case 'MIX':
                    ele.addEventListener('click', game.mix.bind(game));
                    break;
                case 'START':
                    ele.addEventListener('click', game.start.bind(game));
                    break;
            }
            game.actionContainerEle.appendChild(ele);
        });
        game.gameContainerEle.appendChild(game.imgContainerEle);
        game.gameContainerEle.appendChild(game.actionContainerEle);
    };
    return Game;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Game;
},{"./astar":1,"./node":5,"./util":6}],3:[function(require,module,exports){
"use strict";
// Heap On Top
var Heap = (function () {
    function Heap(nodeList, key) {
        this.heap = [];
        this.b_heap = {};
        this.heap = nodeList;
        this.key = key;
        this.update();
    }
    // public function
    // ---------------
    Heap.prototype.push = function (node) {
        this.heap.push(node);
        this.update();
    };
    Heap.prototype.pop = function () {
        if (this.isEmpty())
            return;
        var result = this.heap.shift();
        !this.isEmpty() && this.update();
        return result;
    };
    Heap.prototype.top = function () {
        return this.heap[0];
    };
    Heap.prototype.isEmpty = function () {
        return !this.heap.length;
    };
    Heap.prototype.has = function (node) {
        var queryStr = node.value.toString();
        return !!this.b_heap[queryStr];
    };
    // private function
    // ---------------
    Heap.prototype.update = function () {
        console.log("heap update!");
        for (var i = Math.floor(this.heap.length / 2); i > -1; i--) {
            this.sink(i);
        }
    };
    Heap.prototype.sink = function (index) {
        console.log(" ---------- sink " + index + " ----------");
        if (index >= Math.floor(this.heap.length / 2))
            return;
        var value = this.heap[index][this.key];
        var _a = this.getChildIndex(index), left = _a[0], right = _a[1];
        if (left && this.heap[left] && this.heap[left][this.key] < value)
            this.swap(index, left);
        if (right && this.heap[right] && this.heap[right][this.key] < value)
            this.swap(index, right);
    };
    Heap.prototype.getChildIndex = function (index) {
        var left, right;
        if (index >= Math.floor(this.heap.length / 2))
            return [null, null];
        left = 2 * index + 1;
        right = (left + 1) === this.heap.length ? (left + 1) : null;
        return [left, right];
    };
    Heap.prototype.swap = function (parent, child) {
        var tmp = this.heap[parent];
        this.heap[parent] = this.heap[child];
        this.heap[child] = tmp;
        this.sink(child);
    };
    // static function
    // ---------------
    Heap.getChildIndex = function (heap, index) {
        var left, right;
        if (index >= Math.floor(heap.length / 2))
            return;
        left = 2 * index + 1;
        right = (left + 1) === heap.length ? (left + 1) : null;
        return [left, right];
    };
    return Heap;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Heap;
},{}],4:[function(require,module,exports){
"use strict";
var game_1 = require("./game");
var game = new game_1.default("container", 3);
console.log(game);
console.log("------------------------");
},{"./game":2}],5:[function(require,module,exports){
"use strict";
var util_1 = require('./util');
var Node = (function () {
    function Node(scale) {
        this.scale = scale;
        this.value = this.createNodeValueByScale(scale);
        this.zeroIndex = Math.pow(scale, 2) - 1;
        // this.parent = new Node(this.scale);
        this.F = 0;
        this.currentCost = 0;
    }
    // public function
    // ---------------
    Node.prototype.shuffle = function () {
        for (var i = 0; i < 5; i++) {
            var direction = Math.floor(Math.random() * 4 + 1);
            this.moveTo(direction);
        }
    };
    Node.prototype.moveTo = function (direction) {
        if (!this.canMoveTo(direction))
            return;
        var targetIndex;
        switch (direction) {
            case util_1.DIRECTION.UP:
                targetIndex = this.zeroIndex - this.scale;
                break;
            case util_1.DIRECTION.RIGHT:
                targetIndex = this.zeroIndex + 1;
                break;
            case util_1.DIRECTION.DOWN:
                targetIndex = this.zeroIndex + this.scale;
                break;
            case util_1.DIRECTION.LEFT:
                targetIndex = this.zeroIndex - 1;
                break;
            default:
                targetIndex = this.zeroIndex;
        }
        this.value[this.zeroIndex] = this.value[targetIndex];
        this.value[targetIndex] = 0;
        this.zeroIndex = targetIndex;
    };
    Node.prototype.getNextNodes = function () {
        var node = this;
        var nextNodes = [];
        [util_1.DIRECTION.UP, util_1.DIRECTION.RIGHT, util_1.DIRECTION.DOWN, util_1.DIRECTION.LEFT].forEach(function (direction) {
            if (node.canMoveTo(direction)) {
                var newNode = Node.nodeClone(node);
                newNode.parent = node;
                newNode.moveTo(direction);
                nextNodes.push(newNode);
            }
        });
        return nextNodes;
    };
    Node.prototype.canMoveTo = function (direction) {
        var row = Math.floor(this.zeroIndex / this.scale);
        var col = this.zeroIndex % this.scale;
        switch (direction) {
            case util_1.DIRECTION.UP:
                return row !== 0;
            case util_1.DIRECTION.RIGHT:
                return col !== this.scale - 1;
            case util_1.DIRECTION.DOWN:
                return row !== this.scale - 1;
            case util_1.DIRECTION.LEFT:
                return col !== 0;
            default:
                return false;
        }
    };
    Node.prototype.getHeuristicToTarget = function (targetNode) {
        var result = 0;
        var diff = 0;
        var i = 0, len = this.value.length;
        for (; i < len; i++) {
            if (this.value[i] !== i + 1)
                diff++;
        }
        var manhatten = 0;
        for (i = 0; i < len; i++) {
            var v = this.value[i];
            if (v !== 0) {
                // now in
                var row = Math.floor(i / this.scale);
                var col = i % this.scale;
                // should in
                var _row = Math.floor(v / this.scale);
                var _col = v % this.scale;
                manhatten += Math.abs(row - _row) + Math.abs(col - _col);
            }
        }
        result = 5 * manhatten + 1 * diff;
        return result;
    };
    Node.prototype.getCurrentCost = function () {
        return this.currentCost;
    };
    Node.prototype.getCostToNext = function () {
        return 1;
    };
    // private function
    // ----------------
    Node.prototype.createNodeValueByScale = function (scale) {
        var val = [];
        for (var i = 1; i < Math.pow(scale, 2); i++) {
            val.push(i);
        }
        val.push(0);
        return val;
    };
    // static function
    // ---------------
    Node.isSame = function (currentNode, targetNode) {
        return currentNode.value.toString() === targetNode.value.toString();
    };
    Node.nodeClone = function (node) {
        var newNode = new Node(node.scale);
        newNode.value = node.value.slice(0);
        newNode.zeroIndex = node.zeroIndex;
        return newNode;
    };
    // cost from one node to another node
    Node.costFromN2N = function (fromNode, toNode) {
    };
    return Node;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Node;
},{"./util":6}],6:[function(require,module,exports){
"use strict";
(function (DIRECTION) {
    DIRECTION[DIRECTION["UP"] = 1] = "UP";
    DIRECTION[DIRECTION["RIGHT"] = 2] = "RIGHT";
    DIRECTION[DIRECTION["DOWN"] = 3] = "DOWN";
    DIRECTION[DIRECTION["LEFT"] = 4] = "LEFT";
})(exports.DIRECTION || (exports.DIRECTION = {}));
var DIRECTION = exports.DIRECTION;
function $id(eleId) {
    return document.getElementById(eleId);
}
exports.$id = $id;
function $createEle(tagName, id, className) {
    var ele = document.createElement(tagName);
    if (id)
        ele.id = id;
    if (className)
        ele.className = className;
    return ele;
}
exports.$createEle = $createEle;
},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
